// Synopsys, Inc.
// User: ICer
// Date: Mon Jan 15 15:32:26 2024

// ==================================================================================================
// This config file prototype is produced from the last run using the complete list of extracted fsms.
// Please note that by providing your own description of the module you are enforcing what will be
// extracted for that module.
// Copy this file to your source directory and edit it as described below,
// then pass the file to VCS using the -cm_fsmcfg command line option.
// FSMs will be extracted normally for any module not mentioned in this file
// ==================================================================================================
// 1. For every module that you want to specify yourself, use:
//      MODULE==name
//    -----------------------------------------------------
//    The following options are defining the behavior on the module level.
//    -----------------------------------------------------
//    1.1  You can control what fsms should be used within this module:
//            FSMS=AUTO
//            this means that you want VCS to automatically extract all
//            detectable FSMs from this module.
//            -----------------------------------------------------
//            FSMS=EXCLUDE
//            this means that you want all fsms except the ones from the list that follows
//            if the list is empty, all fsms will be extracted for this module
//            -----------------------------------------------------
//            FSMS=RESTRICT
//            this means that you want only the fsms from the list that follows
//            if the list is empty, no fsms will be extracted for this module
//            -----------------------------------------------------
//         If none of these options are specified, the program will assume FSMS=RESTRICT
//         -----------------------------------------------------
//     1.2 You can specify that the state with the minimal value should be used as a
//         start state for all sequences in every fsm in the module.
//            FSMS=START_STATE_DFLT
//         For any particular fsm you can overwrite this behavior inside its description.
//    -----------------------------------------------------
// 2. Each fsm description in the list of fsms should be specified as follows:
//      2.1 provide the current state variable declaration:
//          CURRENT= name of the current state variable
//      -----------------------------------------------------
//      2.2 if next state variable is different from the current state provide:
//          NEXT= next state variable
//          if you don't use NEXT=, the program will assume that CURRENT and NEXT are the same
//      -----------------------------------------------------
//      2.3 if you want to provide the restrictive the list of states, provide:
//          STATES= s0,s1 etc. where s0 is either a name or a value of the state
//          if you don't use STATES=, the program will assume that you want to use all states
//      -----------------------------------------------------
//      2.4 if you want to ignore some states, specify them in the following list:
//          STATES_X= s0,s1, etc.
//      -----------------------------------------------------
//      2.5 if you want to mark, that some states should never be reached, specify them as a list:
//          STATES_NEVER= s0,s1, etc.
//      -----------------------------------------------------
//      2.6 similar to the STATES, if you want to provide the restrictive the list of transitions, specify:
//          TRANSITIONS= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.7 similar to the STATES_X, if you want to ignore some transitions, specify them in the following list:
//          TRANSITIONS_X= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.8 similar to the STATES_NEVER,if you want to mark, that some transitions should never occur,
//          specify them as a list:
//          TRANSITIONS_NEVER= s0->s1,s1->s2,     etc.
//      -----------------------------------------------------
//      2.9 if you want to specify the start state use:
//          START_STATE= s0
//      -----------------------------------------------------
//      Please note:
//          - that a state in every list can be specified either by name or by value.
//          - in specifying the transitions you can use * in order to refer to 'any' state.
// ==================================================================================================
// Uncomment and modify the following 2 line to override default FSM sequence limits for all FSMs in the design.
//SEQ_NUMBER_MAX=10000
//SEQ_LENGTH_MAX=32

MODULE=adc_chain_regcfg_w_max11040
CURRENT=current_state
NEXT=next_state
STATES=IDEL,IDELtoWRCR,WDRCR,WDRCRtoWSICR,WRCR,WRCRtoWDRCR,WSICR,WSICRtoIDEL
TRANSITIONS=IDEL->IDELtoWRCR,
IDELtoWRCR->IDEL,
IDELtoWRCR->WRCR,
WDRCR->IDEL,
WDRCR->WDRCRtoWSICR,
WDRCRtoWSICR->IDEL,
WDRCRtoWSICR->WSICR,
WRCR->IDEL,
WRCR->WRCRtoWDRCR,
WRCRtoWDRCR->IDEL,
WRCRtoWDRCR->WDRCR,
WSICR->IDEL,
WSICR->WSICRtoIDEL,
WSICRtoIDEL->IDEL
MODULE=mdio_ctrl
CURRENT=flow_cnt
NEXT=flow_cnt
STATES='h0,'h1,'h2,'h3,'h4
TRANSITIONS='h0->'h1,
'h0->'h2,
'h1->'h0,
'h2->'h0,
'h2->'h3,
'h2->'h4,
'h3->'h0,
'h4->'h0
MODULE=arp_rx
CURRENT=cur_state
NEXT=next_state
STATES=st_arp_data,st_eth_head,st_idle,st_preamble,st_rx_end
TRANSITIONS=st_arp_data->st_idle,
st_arp_data->st_rx_end,
st_eth_head->st_arp_data,
st_eth_head->st_idle,
st_eth_head->st_rx_end,
st_idle->st_preamble,
st_preamble->st_eth_head,
st_preamble->st_idle,
st_preamble->st_rx_end,
st_rx_end->st_idle
MODULE=adc_chain_regcfg_r_max11040
CURRENT=current_state
NEXT=next_state
STATES=IDEL,IDELtoRRCR,RDRCR,RDRCRtoRSICR,RDRDATA,RDRDATAtoIDEL,RRCR,RRCRtoRDRCR,RSICR,RSICRtoRDRDATA
TRANSITIONS=IDEL->IDELtoRRCR,
IDELtoRRCR->IDEL,
IDELtoRRCR->RRCR,
RDRCR->IDEL,
RDRCR->RDRCRtoRSICR,
RDRCRtoRSICR->IDEL,
RDRCRtoRSICR->RSICR,
RDRDATA->IDEL,
RDRDATA->RDRDATAtoIDEL,
RDRDATAtoIDEL->IDEL,
RDRDATAtoIDEL->RDRDATA,
RRCR->IDEL,
RRCR->RRCRtoRDRCR,
RRCRtoRDRCR->IDEL,
RRCRtoRDRCR->RDRCR,
RSICR->IDEL,
RSICR->RSICRtoRDRDATA,
RSICRtoRDRDATA->IDEL,
RSICRtoRDRDATA->RDRDATA
MODULE=arp_tx
CURRENT=cur_state
NEXT=next_state
STATES=st_arp_data,st_crc,st_eth_head,st_idle,st_preamble
TRANSITIONS=st_arp_data->st_crc,
st_arp_data->st_idle,
st_crc->st_idle,
st_eth_head->st_arp_data,
st_eth_head->st_idle,
st_idle->st_preamble,
st_preamble->st_eth_head,
st_preamble->st_idle
MODULE=mdio_dri
CURRENT=cur_state
NEXT=next_state
STATES=st_addr,st_idle,st_pre,st_rd_data,st_start,st_wr_data
TRANSITIONS=st_addr->st_idle,
st_addr->st_rd_data,
st_addr->st_wr_data,
st_idle->st_pre,
st_pre->st_idle,
st_pre->st_start,
st_rd_data->st_idle,
st_start->st_addr,
st_start->st_idle,
st_wr_data->st_idle
MODULE=UART_RX
CURRENT=current_state
NEXT=next_state
STATES=data_st,idle_st,start_st,stop_st
TRANSITIONS=data_st->idle_st,
data_st->stop_st,
idle_st->start_st,
start_st->data_st,
start_st->idle_st,
stop_st->idle_st
MODULE=udp_rx
CURRENT=cur_state
NEXT=next_state
STATES=st_eth_head,st_idle,st_ip_head,st_preamble,st_rx_data,st_rx_end,st_udp_head
TRANSITIONS=st_eth_head->st_idle,
st_eth_head->st_ip_head,
st_eth_head->st_rx_end,
st_idle->st_preamble,
st_ip_head->st_idle,
st_ip_head->st_rx_end,
st_ip_head->st_udp_head,
st_preamble->st_eth_head,
st_preamble->st_idle,
st_preamble->st_rx_end,
st_rx_data->st_idle,
st_rx_data->st_rx_end,
st_rx_end->st_idle,
st_udp_head->st_idle,
st_udp_head->st_rx_data
MODULE=udp_tx
CURRENT=cur_state
NEXT=next_state
STATES=st_check_sum,st_crc,st_eth_head,st_idle,st_ip_head,st_preamble,st_tx_data
TRANSITIONS=st_check_sum->st_idle,
st_check_sum->st_preamble,
st_crc->st_idle,
st_eth_head->st_idle,
st_eth_head->st_ip_head,
st_idle->st_check_sum,
st_ip_head->st_idle,
st_ip_head->st_tx_data,
st_preamble->st_eth_head,
st_preamble->st_idle,
st_tx_data->st_crc,
st_tx_data->st_idle
MODULE=AHBTIMER
CURRENT=state1
NEXT=state1
STATES=int_clr,int_con,int_gen
TRANSITIONS=int_clr->int_gen,
int_con->int_clr,
int_con->int_gen,
int_gen->int_con
MODULE=UART_TX
CURRENT=current_state
NEXT=next_state
STATES=data_st,idle_st,start_st,stop_st
TRANSITIONS=data_st->idle_st,
data_st->stop_st,
idle_st->start_st,
start_st->data_st,
start_st->idle_st,
stop_st->idle_st
